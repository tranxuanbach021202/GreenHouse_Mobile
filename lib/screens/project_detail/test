@override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
        create: (_) => getIt<MemberPermissionsViewModel>(),
        child: Scaffold(
          resizeToAvoidBottomInset: false,
          backgroundColor: AppColors.culTured,
          appBar: AppBar(
            leading: BackButton(),
            centerTitle: true,
            title: Text(
              widget.isEditMode ? 'Chỉnh sửa thành viên' : 'Thêm thành viên',
              style: const TextStyle(
                color: AppColors.stateGreen,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            actions: [
              TextButton(
                onPressed: () {
                  if (widget.isEditMode) {
                    context.go('/project_detail/${widget.projectId}');
                  } else {
                    context.go('/project_management');
                  }
                },
                child: const Text(
                  'Huỷ  ',
                  style: TextStyle(
                    color: Colors.redAccent,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
            backgroundColor: Colors.transparent,
            elevation: 0,
          ),
          body: SafeArea(
            child: Stack(
              children: [
                Column(
                  children: [
                    // Phần header cố định
                    Column(
                      children: [
                        const SizedBox(height: 8),
                        Padding(
                          padding: const EdgeInsets.all(16),
                          child: CompositedTransformTarget(
                            link: _layerLink,
                            child: TextField(
                              controller: _searchController,
                              decoration: InputDecoration(
                                hintText: 'Tìm kiếm người dùng',
                                prefixIcon: const Icon(Icons.search, color: Colors.grey),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(16),
                                  borderSide: const BorderSide(color: Colors.grey, width: 1),
                                ),
                                filled: true,
                                fillColor: Colors.white,
                              ),
                              onChanged: _onSearchChanged,
                              onTap: () {
                                if (_searchController.text.isNotEmpty) {
                                  _showOverlay();
                                }
                              },
                              focusNode: FocusNode()..addListener(() {
                                if (!_isSearchFocused) {
                                  _searchController.text = '';
                                  _removeOverlay();
                                }
                              }),
                            ),
                          ),
                        ),

                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          child: Align(
                            alignment: Alignment.centerLeft,
                            child: Text(
                              'Thành viên',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: AppColors.black90,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),

                    // Phần list có thể scroll với padding bottom để tránh bị button che
                    Expanded(
                      child: Consumer<MemberPermissionsViewModel>(
                        builder: (context, viewModel, child) {
                          return Padding(
                            padding: const EdgeInsets.only(bottom: 80),
                            child: _buildMembersList(viewModel),
                          );
                        },
                      ),
                    ),
                  ],
                ),

                // Button được position cố định ở dưới
                Positioned(
                  left: 0,
                  right: 0,
                  bottom: 0,
                  child: Consumer<MemberPermissionsViewModel>(
                    builder: (context, viewModel, child) {
                      return Container(
                        color: AppColors.culTured, // Thêm background color để tránh list lộ ra phía sau
                        padding: EdgeInsets.only(
                          bottom: MediaQuery.of(context).viewInsets.bottom > 0 ? 20 : 20,
                          left: 20,
                          right: 20,
                          top: 20,
                        ),
                        child: CustomButtonWidget(
                          isLoading: viewModel.isLoading,
                          text: widget.isEditMode ? 'Cập nhật' : 'Tiếp tục',
                          loadingText: widget.isEditMode ? 'Đang cập nhật...' : 'Đang xử lý...',
                          backgroundColor: AppColors.stateGreen,
                          onPressed: () async {
                            final success = await viewModel.saveMemberPermissions(
                                isEditMode: widget.isEditMode,
                                projectId: widget.projectId
                            );
                            if (success) {
                              if (widget.isEditMode) {
                                showDialog(
                                  context: context,
                                  barrierDismissible: false,
                                  builder: (context) => const SuccessDialog(
                                    message: "Cập nhật thành công!",
                                  ),
                                );

                                await Future.delayed(const Duration(milliseconds: 2500));
                                context.pop();
                              } else {
                                context.push('/factor_level_project');
                              }
                            }
                          },
                        ),
                      );
                    },
                  )
                ),
              ],
            ),
          ),


        ),
    );

  }